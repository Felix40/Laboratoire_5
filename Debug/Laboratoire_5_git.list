
Laboratoire_5_git.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f7c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08001104  08001104  00011104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08001108  08001108  00011108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000024  20000000  0800110c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
  6 .bss          000000e4  20000024  20000024  00020024  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000108  20000108  00020024  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
  9 .debug_info   000062f3  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000013b4  00000000  00000000  00026347  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000820  00000000  00000000  00027700  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000748  00000000  00000000  00027f20  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002ff2  00000000  00000000  00028668  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000027f5  00000000  00000000  0002b65a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002de4f  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002088  00000000  00000000  0002decc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080010ec 	.word	0x080010ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	080010ec 	.word	0x080010ec

080001c8 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	460b      	mov	r3, r1
 80001d2:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80001d4:	2300      	movs	r3, #0
 80001d6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80001d8:	4b08      	ldr	r3, [pc, #32]	; (80001fc <DAC_SetChannel1Data+0x34>)
 80001da:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80001dc:	68fa      	ldr	r2, [r7, #12]
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	4413      	add	r3, r2
 80001e2:	3308      	adds	r3, #8
 80001e4:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	461a      	mov	r2, r3
 80001ea:	887b      	ldrh	r3, [r7, #2]
 80001ec:	6013      	str	r3, [r2, #0]
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	40007400 	.word	0x40007400

08000200 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000200:	b480      	push	{r7}
 8000202:	b085      	sub	sp, #20
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
 8000208:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800020a:	2300      	movs	r3, #0
 800020c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000214:	68fa      	ldr	r2, [r7, #12]
 8000216:	4b25      	ldr	r3, [pc, #148]	; (80002ac <DMA_Init+0xac>)
 8000218:	4013      	ands	r3, r2
 800021a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	683b      	ldr	r3, [r7, #0]
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800022a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	699b      	ldr	r3, [r3, #24]
 8000230:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000236:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	6a1b      	ldr	r3, [r3, #32]
 800023c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000242:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000248:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800024e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000250:	683b      	ldr	r3, [r7, #0]
 8000252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000254:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000256:	68fa      	ldr	r2, [r7, #12]
 8000258:	4313      	orrs	r3, r2
 800025a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	68fa      	ldr	r2, [r7, #12]
 8000260:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	695b      	ldr	r3, [r3, #20]
 8000266:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	f023 0307 	bic.w	r3, r3, #7
 800026e:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000278:	4313      	orrs	r3, r2
 800027a:	68fa      	ldr	r2, [r7, #12]
 800027c:	4313      	orrs	r3, r2
 800027e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	68fa      	ldr	r2, [r7, #12]
 8000284:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	691a      	ldr	r2, [r3, #16]
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	685a      	ldr	r2, [r3, #4]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	689a      	ldr	r2, [r3, #8]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	60da      	str	r2, [r3, #12]
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	f01c803f 	.word	0xf01c803f

080002b0 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	460b      	mov	r3, r1
 80002ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80002bc:	78fb      	ldrb	r3, [r7, #3]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d006      	beq.n	80002d0 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f043 0201 	orr.w	r2, r3, #1
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80002ce:	e005      	b.n	80002dc <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f023 0201 	bic.w	r2, r3, #1
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	601a      	str	r2, [r3, #0]
}
 80002dc:	bf00      	nop
 80002de:	370c      	adds	r7, #12
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr

080002e8 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80002f0:	2300      	movs	r3, #0
 80002f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	f003 0301 	and.w	r3, r3, #1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d002      	beq.n	8000306 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000300:	2301      	movs	r3, #1
 8000302:	73fb      	strb	r3, [r7, #15]
 8000304:	e001      	b.n	800030a <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000306:	2300      	movs	r3, #0
 8000308:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800030a:	7bfb      	ldrb	r3, [r7, #15]
}
 800030c:	4618      	mov	r0, r3
 800030e:	3714      	adds	r7, #20
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr

08000318 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000318:	b480      	push	{r7}
 800031a:	b087      	sub	sp, #28
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000322:	2300      	movs	r3, #0
 8000324:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000326:	2300      	movs	r3, #0
 8000328:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a15      	ldr	r2, [pc, #84]	; (8000384 <DMA_GetFlagStatus+0x6c>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d802      	bhi.n	8000338 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000332:	4b15      	ldr	r3, [pc, #84]	; (8000388 <DMA_GetFlagStatus+0x70>)
 8000334:	613b      	str	r3, [r7, #16]
 8000336:	e001      	b.n	800033c <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000338:	4b14      	ldr	r3, [pc, #80]	; (800038c <DMA_GetFlagStatus+0x74>)
 800033a:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000342:	2b00      	cmp	r3, #0
 8000344:	d003      	beq.n	800034e <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000346:	693b      	ldr	r3, [r7, #16]
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	e002      	b.n	8000354 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800034e:	693b      	ldr	r3, [r7, #16]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800035a:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800035e:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000360:	68fa      	ldr	r2, [r7, #12]
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	4013      	ands	r3, r2
 8000366:	2b00      	cmp	r3, #0
 8000368:	d002      	beq.n	8000370 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800036a:	2301      	movs	r3, #1
 800036c:	75fb      	strb	r3, [r7, #23]
 800036e:	e001      	b.n	8000374 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000370:	2300      	movs	r3, #0
 8000372:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000374:	7dfb      	ldrb	r3, [r7, #23]
}
 8000376:	4618      	mov	r0, r3
 8000378:	371c      	adds	r7, #28
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	4002640f 	.word	0x4002640f
 8000388:	40026000 	.word	0x40026000
 800038c:	40026400 	.word	0x40026400

08000390 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a10      	ldr	r2, [pc, #64]	; (80003e0 <DMA_ClearFlag+0x50>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d802      	bhi.n	80003a8 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80003a2:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <DMA_ClearFlag+0x54>)
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	e001      	b.n	80003ac <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80003a8:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <DMA_ClearFlag+0x58>)
 80003aa:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d007      	beq.n	80003c6 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80003bc:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80003c0:	68fa      	ldr	r2, [r7, #12]
 80003c2:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80003c4:	e006      	b.n	80003d4 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80003cc:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80003d0:	68fa      	ldr	r2, [r7, #12]
 80003d2:	6093      	str	r3, [r2, #8]
}
 80003d4:	bf00      	nop
 80003d6:	3714      	adds	r7, #20
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	4002640f 	.word	0x4002640f
 80003e4:	40026000 	.word	0x40026000
 80003e8:	40026400 	.word	0x40026400

080003ec <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b087      	sub	sp, #28
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80003f6:	2300      	movs	r3, #0
 80003f8:	617b      	str	r3, [r7, #20]
 80003fa:	2300      	movs	r3, #0
 80003fc:	613b      	str	r3, [r7, #16]
 80003fe:	2300      	movs	r3, #0
 8000400:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]
 8000406:	e076      	b.n	80004f6 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000408:	2201      	movs	r2, #1
 800040a:	697b      	ldr	r3, [r7, #20]
 800040c:	fa02 f303 	lsl.w	r3, r2, r3
 8000410:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	681a      	ldr	r2, [r3, #0]
 8000416:	693b      	ldr	r3, [r7, #16]
 8000418:	4013      	ands	r3, r2
 800041a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800041c:	68fa      	ldr	r2, [r7, #12]
 800041e:	693b      	ldr	r3, [r7, #16]
 8000420:	429a      	cmp	r2, r3
 8000422:	d165      	bne.n	80004f0 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	681a      	ldr	r2, [r3, #0]
 8000428:	697b      	ldr	r3, [r7, #20]
 800042a:	005b      	lsls	r3, r3, #1
 800042c:	2103      	movs	r1, #3
 800042e:	fa01 f303 	lsl.w	r3, r1, r3
 8000432:	43db      	mvns	r3, r3
 8000434:	401a      	ands	r2, r3
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	791b      	ldrb	r3, [r3, #4]
 8000442:	4619      	mov	r1, r3
 8000444:	697b      	ldr	r3, [r7, #20]
 8000446:	005b      	lsls	r3, r3, #1
 8000448:	fa01 f303 	lsl.w	r3, r1, r3
 800044c:	431a      	orrs	r2, r3
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	791b      	ldrb	r3, [r3, #4]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d003      	beq.n	8000462 <GPIO_Init+0x76>
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	791b      	ldrb	r3, [r3, #4]
 800045e:	2b02      	cmp	r3, #2
 8000460:	d12e      	bne.n	80004c0 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	689a      	ldr	r2, [r3, #8]
 8000466:	697b      	ldr	r3, [r7, #20]
 8000468:	005b      	lsls	r3, r3, #1
 800046a:	2103      	movs	r1, #3
 800046c:	fa01 f303 	lsl.w	r3, r1, r3
 8000470:	43db      	mvns	r3, r3
 8000472:	401a      	ands	r2, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	689a      	ldr	r2, [r3, #8]
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	795b      	ldrb	r3, [r3, #5]
 8000480:	4619      	mov	r1, r3
 8000482:	697b      	ldr	r3, [r7, #20]
 8000484:	005b      	lsls	r3, r3, #1
 8000486:	fa01 f303 	lsl.w	r3, r1, r3
 800048a:	431a      	orrs	r2, r3
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	685a      	ldr	r2, [r3, #4]
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	b29b      	uxth	r3, r3
 8000498:	4619      	mov	r1, r3
 800049a:	2301      	movs	r3, #1
 800049c:	408b      	lsls	r3, r1
 800049e:	43db      	mvns	r3, r3
 80004a0:	401a      	ands	r2, r3
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	685b      	ldr	r3, [r3, #4]
 80004aa:	683a      	ldr	r2, [r7, #0]
 80004ac:	7992      	ldrb	r2, [r2, #6]
 80004ae:	4611      	mov	r1, r2
 80004b0:	697a      	ldr	r2, [r7, #20]
 80004b2:	b292      	uxth	r2, r2
 80004b4:	fa01 f202 	lsl.w	r2, r1, r2
 80004b8:	b292      	uxth	r2, r2
 80004ba:	431a      	orrs	r2, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	68da      	ldr	r2, [r3, #12]
 80004c4:	697b      	ldr	r3, [r7, #20]
 80004c6:	b29b      	uxth	r3, r3
 80004c8:	005b      	lsls	r3, r3, #1
 80004ca:	2103      	movs	r1, #3
 80004cc:	fa01 f303 	lsl.w	r3, r1, r3
 80004d0:	43db      	mvns	r3, r3
 80004d2:	401a      	ands	r2, r3
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	68da      	ldr	r2, [r3, #12]
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	79db      	ldrb	r3, [r3, #7]
 80004e0:	4619      	mov	r1, r3
 80004e2:	697b      	ldr	r3, [r7, #20]
 80004e4:	005b      	lsls	r3, r3, #1
 80004e6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ea:	431a      	orrs	r2, r3
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	3301      	adds	r3, #1
 80004f4:	617b      	str	r3, [r7, #20]
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	2b0f      	cmp	r3, #15
 80004fa:	d985      	bls.n	8000408 <GPIO_Init+0x1c>
    }
  }
}
 80004fc:	bf00      	nop
 80004fe:	371c      	adds	r7, #28
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr

08000508 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	460b      	mov	r3, r1
 8000512:	807b      	strh	r3, [r7, #2]
 8000514:	4613      	mov	r3, r2
 8000516:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000518:	2300      	movs	r3, #0
 800051a:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800051c:	2300      	movs	r3, #0
 800051e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000520:	787a      	ldrb	r2, [r7, #1]
 8000522:	887b      	ldrh	r3, [r7, #2]
 8000524:	f003 0307 	and.w	r3, r3, #7
 8000528:	009b      	lsls	r3, r3, #2
 800052a:	fa02 f303 	lsl.w	r3, r2, r3
 800052e:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000530:	887b      	ldrh	r3, [r7, #2]
 8000532:	08db      	lsrs	r3, r3, #3
 8000534:	b29b      	uxth	r3, r3
 8000536:	4618      	mov	r0, r3
 8000538:	887b      	ldrh	r3, [r7, #2]
 800053a:	08db      	lsrs	r3, r3, #3
 800053c:	b29b      	uxth	r3, r3
 800053e:	461a      	mov	r2, r3
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	3208      	adds	r2, #8
 8000544:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000548:	887b      	ldrh	r3, [r7, #2]
 800054a:	f003 0307 	and.w	r3, r3, #7
 800054e:	009b      	lsls	r3, r3, #2
 8000550:	210f      	movs	r1, #15
 8000552:	fa01 f303 	lsl.w	r3, r1, r3
 8000556:	43db      	mvns	r3, r3
 8000558:	ea02 0103 	and.w	r1, r2, r3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f100 0208 	add.w	r2, r0, #8
 8000562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000566:	887b      	ldrh	r3, [r7, #2]
 8000568:	08db      	lsrs	r3, r3, #3
 800056a:	b29b      	uxth	r3, r3
 800056c:	461a      	mov	r2, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	3208      	adds	r2, #8
 8000572:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	4313      	orrs	r3, r2
 800057a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800057c:	887b      	ldrh	r3, [r7, #2]
 800057e:	08db      	lsrs	r3, r3, #3
 8000580:	b29b      	uxth	r3, r3
 8000582:	461a      	mov	r2, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	3208      	adds	r2, #8
 8000588:	68b9      	ldr	r1, [r7, #8]
 800058a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
	...

0800059c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800059c:	b480      	push	{r7}
 800059e:	b089      	sub	sp, #36	; 0x24
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61bb      	str	r3, [r7, #24]
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]
 80005ac:	2300      	movs	r3, #0
 80005ae:	61fb      	str	r3, [r7, #28]
 80005b0:	2302      	movs	r3, #2
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	2302      	movs	r3, #2
 80005ba:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80005bc:	4b47      	ldr	r3, [pc, #284]	; (80006dc <RCC_GetClocksFreq+0x140>)
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	f003 030c 	and.w	r3, r3, #12
 80005c4:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80005c6:	69bb      	ldr	r3, [r7, #24]
 80005c8:	2b04      	cmp	r3, #4
 80005ca:	d007      	beq.n	80005dc <RCC_GetClocksFreq+0x40>
 80005cc:	2b08      	cmp	r3, #8
 80005ce:	d009      	beq.n	80005e4 <RCC_GetClocksFreq+0x48>
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d13d      	bne.n	8000650 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4a42      	ldr	r2, [pc, #264]	; (80006e0 <RCC_GetClocksFreq+0x144>)
 80005d8:	601a      	str	r2, [r3, #0]
      break;
 80005da:	e03d      	b.n	8000658 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4a41      	ldr	r2, [pc, #260]	; (80006e4 <RCC_GetClocksFreq+0x148>)
 80005e0:	601a      	str	r2, [r3, #0]
      break;
 80005e2:	e039      	b.n	8000658 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80005e4:	4b3d      	ldr	r3, [pc, #244]	; (80006dc <RCC_GetClocksFreq+0x140>)
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	0d9b      	lsrs	r3, r3, #22
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80005f0:	4b3a      	ldr	r3, [pc, #232]	; (80006dc <RCC_GetClocksFreq+0x140>)
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80005f8:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d00c      	beq.n	800061a <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000600:	4a38      	ldr	r2, [pc, #224]	; (80006e4 <RCC_GetClocksFreq+0x148>)
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	fbb2 f3f3 	udiv	r3, r2, r3
 8000608:	4a34      	ldr	r2, [pc, #208]	; (80006dc <RCC_GetClocksFreq+0x140>)
 800060a:	6852      	ldr	r2, [r2, #4]
 800060c:	0992      	lsrs	r2, r2, #6
 800060e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000612:	fb02 f303 	mul.w	r3, r2, r3
 8000616:	61fb      	str	r3, [r7, #28]
 8000618:	e00b      	b.n	8000632 <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800061a:	4a31      	ldr	r2, [pc, #196]	; (80006e0 <RCC_GetClocksFreq+0x144>)
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000622:	4a2e      	ldr	r2, [pc, #184]	; (80006dc <RCC_GetClocksFreq+0x140>)
 8000624:	6852      	ldr	r2, [r2, #4]
 8000626:	0992      	lsrs	r2, r2, #6
 8000628:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800062c:	fb02 f303 	mul.w	r3, r2, r3
 8000630:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000632:	4b2a      	ldr	r3, [pc, #168]	; (80006dc <RCC_GetClocksFreq+0x140>)
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	0c1b      	lsrs	r3, r3, #16
 8000638:	f003 0303 	and.w	r3, r3, #3
 800063c:	3301      	adds	r3, #1
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000642:	69fa      	ldr	r2, [r7, #28]
 8000644:	693b      	ldr	r3, [r7, #16]
 8000646:	fbb2 f2f3 	udiv	r2, r2, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	601a      	str	r2, [r3, #0]
      break;
 800064e:	e003      	b.n	8000658 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4a23      	ldr	r2, [pc, #140]	; (80006e0 <RCC_GetClocksFreq+0x144>)
 8000654:	601a      	str	r2, [r3, #0]
      break;
 8000656:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <RCC_GetClocksFreq+0x140>)
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000660:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000662:	69bb      	ldr	r3, [r7, #24]
 8000664:	091b      	lsrs	r3, r3, #4
 8000666:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000668:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <RCC_GetClocksFreq+0x14c>)
 800066a:	69bb      	ldr	r3, [r7, #24]
 800066c:	4413      	add	r3, r2
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	40da      	lsrs	r2, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000680:	4b16      	ldr	r3, [pc, #88]	; (80006dc <RCC_GetClocksFreq+0x140>)
 8000682:	689b      	ldr	r3, [r3, #8]
 8000684:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000688:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800068a:	69bb      	ldr	r3, [r7, #24]
 800068c:	0a9b      	lsrs	r3, r3, #10
 800068e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000690:	4a15      	ldr	r2, [pc, #84]	; (80006e8 <RCC_GetClocksFreq+0x14c>)
 8000692:	69bb      	ldr	r3, [r7, #24]
 8000694:	4413      	add	r3, r2
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	685a      	ldr	r2, [r3, #4]
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	40da      	lsrs	r2, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <RCC_GetClocksFreq+0x140>)
 80006aa:	689b      	ldr	r3, [r3, #8]
 80006ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80006b0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80006b2:	69bb      	ldr	r3, [r7, #24]
 80006b4:	0b5b      	lsrs	r3, r3, #13
 80006b6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80006b8:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <RCC_GetClocksFreq+0x14c>)
 80006ba:	69bb      	ldr	r3, [r7, #24]
 80006bc:	4413      	add	r3, r2
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	685a      	ldr	r2, [r3, #4]
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	60da      	str	r2, [r3, #12]
}
 80006d0:	bf00      	nop
 80006d2:	3724      	adds	r7, #36	; 0x24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	40023800 	.word	0x40023800
 80006e0:	00f42400 	.word	0x00f42400
 80006e4:	007a1200 	.word	0x007a1200
 80006e8:	20000000 	.word	0x20000000

080006ec <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	460b      	mov	r3, r1
 80006f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80006f8:	78fb      	ldrb	r3, [r7, #3]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d006      	beq.n	800070c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80006fe:	490a      	ldr	r1, [pc, #40]	; (8000728 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4313      	orrs	r3, r2
 8000708:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800070a:	e006      	b.n	800071a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800070c:	4906      	ldr	r1, [pc, #24]	; (8000728 <RCC_AHB1PeriphClockCmd+0x3c>)
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	43db      	mvns	r3, r3
 8000716:	4013      	ands	r3, r2
 8000718:	630b      	str	r3, [r1, #48]	; 0x30
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800

0800072c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	460b      	mov	r3, r1
 8000736:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000738:	78fb      	ldrb	r3, [r7, #3]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d006      	beq.n	800074c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800073e:	490a      	ldr	r1, [pc, #40]	; (8000768 <RCC_APB1PeriphClockCmd+0x3c>)
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <RCC_APB1PeriphClockCmd+0x3c>)
 8000742:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4313      	orrs	r3, r2
 8000748:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800074a:	e006      	b.n	800075a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800074c:	4906      	ldr	r1, [pc, #24]	; (8000768 <RCC_APB1PeriphClockCmd+0x3c>)
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <RCC_APB1PeriphClockCmd+0x3c>)
 8000750:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	43db      	mvns	r3, r3
 8000756:	4013      	ands	r3, r2
 8000758:	640b      	str	r3, [r1, #64]	; 0x40
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800

0800076c <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	887a      	ldrh	r2, [r7, #2]
 800077c:	819a      	strh	r2, [r3, #12]
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr

0800078a <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800078a:	b480      	push	{r7}
 800078c:	b085      	sub	sp, #20
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
 8000792:	460b      	mov	r3, r1
 8000794:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000796:	2300      	movs	r3, #0
 8000798:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	891b      	ldrh	r3, [r3, #8]
 800079e:	b29a      	uxth	r2, r3
 80007a0:	887b      	ldrh	r3, [r7, #2]
 80007a2:	4013      	ands	r3, r2
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d002      	beq.n	80007b0 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80007aa:	2301      	movs	r3, #1
 80007ac:	73fb      	strb	r3, [r7, #15]
 80007ae:	e001      	b.n	80007b4 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80007b0:	2300      	movs	r3, #0
 80007b2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
	...

080007c4 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
 80007d2:	2300      	movs	r3, #0
 80007d4:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	8a1b      	ldrh	r3, [r3, #16]
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80007e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	88db      	ldrh	r3, [r3, #6]
 80007f2:	461a      	mov	r2, r3
 80007f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f6:	4313      	orrs	r3, r2
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80007fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fc:	b29a      	uxth	r2, r3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	899b      	ldrh	r3, [r3, #12]
 8000806:	b29b      	uxth	r3, r3
 8000808:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800080a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800080c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000810:	f023 030c 	bic.w	r3, r3, #12
 8000814:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	889a      	ldrh	r2, [r3, #4]
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	891b      	ldrh	r3, [r3, #8]
 800081e:	4313      	orrs	r3, r2
 8000820:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000826:	4313      	orrs	r3, r2
 8000828:	b29b      	uxth	r3, r3
 800082a:	461a      	mov	r2, r3
 800082c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800082e:	4313      	orrs	r3, r2
 8000830:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000834:	b29a      	uxth	r2, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	8a9b      	ldrh	r3, [r3, #20]
 800083e:	b29b      	uxth	r3, r3
 8000840:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000848:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	899b      	ldrh	r3, [r3, #12]
 800084e:	461a      	mov	r2, r3
 8000850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000852:	4313      	orrs	r3, r2
 8000854:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000858:	b29a      	uxth	r2, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff fe9a 	bl	800059c <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4a30      	ldr	r2, [pc, #192]	; (800092c <USART_Init+0x168>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d003      	beq.n	8000878 <USART_Init+0xb4>
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4a2f      	ldr	r2, [pc, #188]	; (8000930 <USART_Init+0x16c>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d102      	bne.n	800087e <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	623b      	str	r3, [r7, #32]
 800087c:	e001      	b.n	8000882 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	899b      	ldrh	r3, [r3, #12]
 8000886:	b29b      	uxth	r3, r3
 8000888:	b21b      	sxth	r3, r3
 800088a:	2b00      	cmp	r3, #0
 800088c:	da0c      	bge.n	80008a8 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800088e:	6a3a      	ldr	r2, [r7, #32]
 8000890:	4613      	mov	r3, r2
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	4413      	add	r3, r2
 8000896:	009a      	lsls	r2, r3, #2
 8000898:	441a      	add	r2, r3
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a4:	61fb      	str	r3, [r7, #28]
 80008a6:	e00b      	b.n	80008c0 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80008a8:	6a3a      	ldr	r2, [r7, #32]
 80008aa:	4613      	mov	r3, r2
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	4413      	add	r3, r2
 80008b0:	009a      	lsls	r2, r3, #2
 80008b2:	441a      	add	r2, r3
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80008be:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80008c0:	69fb      	ldr	r3, [r7, #28]
 80008c2:	4a1c      	ldr	r2, [pc, #112]	; (8000934 <USART_Init+0x170>)
 80008c4:	fba2 2303 	umull	r2, r3, r2, r3
 80008c8:	095b      	lsrs	r3, r3, #5
 80008ca:	011b      	lsls	r3, r3, #4
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80008ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d0:	091b      	lsrs	r3, r3, #4
 80008d2:	2264      	movs	r2, #100	; 0x64
 80008d4:	fb02 f303 	mul.w	r3, r2, r3
 80008d8:	69fa      	ldr	r2, [r7, #28]
 80008da:	1ad3      	subs	r3, r2, r3
 80008dc:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	899b      	ldrh	r3, [r3, #12]
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	b21b      	sxth	r3, r3
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	da0c      	bge.n	8000904 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80008ea:	69bb      	ldr	r3, [r7, #24]
 80008ec:	00db      	lsls	r3, r3, #3
 80008ee:	3332      	adds	r3, #50	; 0x32
 80008f0:	4a10      	ldr	r2, [pc, #64]	; (8000934 <USART_Init+0x170>)
 80008f2:	fba2 2303 	umull	r2, r3, r2, r3
 80008f6:	095b      	lsrs	r3, r3, #5
 80008f8:	f003 0307 	and.w	r3, r3, #7
 80008fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008fe:	4313      	orrs	r3, r2
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
 8000902:	e00b      	b.n	800091c <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	011b      	lsls	r3, r3, #4
 8000908:	3332      	adds	r3, #50	; 0x32
 800090a:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <USART_Init+0x170>)
 800090c:	fba2 2303 	umull	r2, r3, r2, r3
 8000910:	095b      	lsrs	r3, r3, #5
 8000912:	f003 030f 	and.w	r3, r3, #15
 8000916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000918:	4313      	orrs	r3, r2
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 800091c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091e:	b29a      	uxth	r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	811a      	strh	r2, [r3, #8]
}
 8000924:	bf00      	nop
 8000926:	3728      	adds	r7, #40	; 0x28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40011000 	.word	0x40011000
 8000930:	40011400 	.word	0x40011400
 8000934:	51eb851f 	.word	0x51eb851f

08000938 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	460b      	mov	r3, r1
 8000942:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000944:	78fb      	ldrb	r3, [r7, #3]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d008      	beq.n	800095c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	899b      	ldrh	r3, [r3, #12]
 800094e:	b29b      	uxth	r3, r3
 8000950:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000954:	b29a      	uxth	r2, r3
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 800095a:	e007      	b.n	800096c <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	899b      	ldrh	r3, [r3, #12]
 8000960:	b29b      	uxth	r3, r3
 8000962:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000966:	b29a      	uxth	r2, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	819a      	strh	r2, [r3, #12]
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 800097c:	4b38      	ldr	r3, [pc, #224]	; (8000a60 <Audio_MAL_IRQHandler+0xe8>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4b38      	ldr	r3, [pc, #224]	; (8000a64 <Audio_MAL_IRQHandler+0xec>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4619      	mov	r1, r3
 8000986:	4610      	mov	r0, r2
 8000988:	f7ff fcc6 	bl	8000318 <DMA_GetFlagStatus>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d064      	beq.n	8000a5c <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8000992:	4b35      	ldr	r3, [pc, #212]	; (8000a68 <Audio_MAL_IRQHandler+0xf0>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d04c      	beq.n	8000a34 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 800099a:	bf00      	nop
 800099c:	4b30      	ldr	r3, [pc, #192]	; (8000a60 <Audio_MAL_IRQHandler+0xe8>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fca1 	bl	80002e8 <DMA_GetCmdStatus>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d1f7      	bne.n	800099c <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 80009ac:	4b2c      	ldr	r3, [pc, #176]	; (8000a60 <Audio_MAL_IRQHandler+0xe8>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b2c      	ldr	r3, [pc, #176]	; (8000a64 <Audio_MAL_IRQHandler+0xec>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4619      	mov	r1, r3
 80009b6:	4610      	mov	r0, r2
 80009b8:	f7ff fcea 	bl	8000390 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 80009bc:	4b2b      	ldr	r3, [pc, #172]	; (8000a6c <Audio_MAL_IRQHandler+0xf4>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b2b      	ldr	r3, [pc, #172]	; (8000a70 <Audio_MAL_IRQHandler+0xf8>)
 80009c4:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 80009c6:	4b28      	ldr	r3, [pc, #160]	; (8000a68 <Audio_MAL_IRQHandler+0xf0>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009ce:	4293      	cmp	r3, r2
 80009d0:	bf28      	it	cs
 80009d2:	4613      	movcs	r3, r2
 80009d4:	4a26      	ldr	r2, [pc, #152]	; (8000a70 <Audio_MAL_IRQHandler+0xf8>)
 80009d6:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 80009d8:	4b21      	ldr	r3, [pc, #132]	; (8000a60 <Audio_MAL_IRQHandler+0xe8>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4924      	ldr	r1, [pc, #144]	; (8000a70 <Audio_MAL_IRQHandler+0xf8>)
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff fc0e 	bl	8000200 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 80009e4:	4b1e      	ldr	r3, [pc, #120]	; (8000a60 <Audio_MAL_IRQHandler+0xe8>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2101      	movs	r1, #1
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff fc60 	bl	80002b0 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 80009f0:	4b1e      	ldr	r3, [pc, #120]	; (8000a6c <Audio_MAL_IRQHandler+0xf4>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <Audio_MAL_IRQHandler+0xf0>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009fc:	d203      	bcs.n	8000a06 <Audio_MAL_IRQHandler+0x8e>
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <Audio_MAL_IRQHandler+0xf0>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	e000      	b.n	8000a08 <Audio_MAL_IRQHandler+0x90>
 8000a06:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <Audio_MAL_IRQHandler+0xfc>)
 8000a08:	4413      	add	r3, r2
 8000a0a:	4a18      	ldr	r2, [pc, #96]	; (8000a6c <Audio_MAL_IRQHandler+0xf4>)
 8000a0c:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8000a0e:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <Audio_MAL_IRQHandler+0xf0>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <Audio_MAL_IRQHandler+0xf0>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a1a:	428b      	cmp	r3, r1
 8000a1c:	bf28      	it	cs
 8000a1e:	460b      	movcs	r3, r1
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	4a11      	ldr	r2, [pc, #68]	; (8000a68 <Audio_MAL_IRQHandler+0xf0>)
 8000a24:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <Audio_MAL_IRQHandler+0xe8>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fc3f 	bl	80002b0 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000a32:	e013      	b.n	8000a5c <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8000a34:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <Audio_MAL_IRQHandler+0xe8>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff fc38 	bl	80002b0 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8000a40:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <Audio_MAL_IRQHandler+0xe8>)
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <Audio_MAL_IRQHandler+0xec>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	f7ff fca0 	bl	8000390 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <Audio_MAL_IRQHandler+0xf4>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 f8c0 	bl	8000bdc <EVAL_AUDIO_TransferComplete_CallBack>
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000018 	.word	0x20000018
 8000a64:	2000001c 	.word	0x2000001c
 8000a68:	20000010 	.word	0x20000010
 8000a6c:	2000004c 	.word	0x2000004c
 8000a70:	2000008c 	.word	0x2000008c
 8000a74:	0001fffe 	.word	0x0001fffe

08000a78 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000a7c:	f7ff ff7c 	bl	8000978 <Audio_MAL_IRQHandler>
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000a88:	f7ff ff76 	bl	8000978 <Audio_MAL_IRQHandler>
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8000a94:	2102      	movs	r1, #2
 8000a96:	480d      	ldr	r0, [pc, #52]	; (8000acc <SPI3_IRQHandler+0x3c>)
 8000a98:	f7ff fe77 	bl	800078a <SPI_I2S_GetFlagStatus>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d011      	beq.n	8000ac6 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <SPI3_IRQHandler+0x40>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	d106      	bne.n	8000ab8 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8000aaa:	f000 f8a2 	bl	8000bf2 <EVAL_AUDIO_GetSampleCallBack>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	2004      	movs	r0, #4
 8000ab4:	f7ff fb88 	bl	80001c8 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8000ab8:	f000 f89b 	bl	8000bf2 <EVAL_AUDIO_GetSampleCallBack>
 8000abc:	4603      	mov	r3, r0
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <SPI3_IRQHandler+0x3c>)
 8000ac2:	f7ff fe53 	bl	800076c <SPI_I2S_SendData>
  }
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40003c00 	.word	0x40003c00
 8000ad0:	20000014 	.word	0x20000014

08000ad4 <init_LCD_Pins>:
   GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN; //pulldown
   GPIO_Init(GPIOC, &GPIO_InitStructure);
}

/*fonction permettant d'init les pins liees au LCD (pins OUT)*/
void init_LCD_Pins(void){
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0

  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE); /*On utilise le port D pour le LCD*/
 8000ad8:	2101      	movs	r1, #1
 8000ada:	2008      	movs	r0, #8
 8000adc:	f7ff fe06 	bl	80006ec <RCC_AHB1PeriphClockCmd>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_1|GPIO_Pin_2|GPIO_Pin_3|GPIO_Pin_4|
 8000ae0:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <init_LCD_Pins+0x68>)
 8000ae2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000ae6:	601a      	str	r2, [r3, #0]
		  GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7| /*DB0 a DB7*/
		  GPIO_Pin_8 | GPIO_Pin_9; /*RW et RS*/

  /*Settings des pins OUT*/
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <init_LCD_Pins+0x68>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	711a      	strb	r2, [r3, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <init_LCD_Pins+0x68>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	719a      	strb	r2, [r3, #6]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <init_LCD_Pins+0x68>)
 8000af6:	2203      	movs	r2, #3
 8000af8:	715a      	strb	r2, [r3, #5]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <init_LCD_Pins+0x68>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	71da      	strb	r2, [r3, #7]
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000b00:	490e      	ldr	r1, [pc, #56]	; (8000b3c <init_LCD_Pins+0x68>)
 8000b02:	480f      	ldr	r0, [pc, #60]	; (8000b40 <init_LCD_Pins+0x6c>)
 8000b04:	f7ff fc72 	bl	80003ec <GPIO_Init>

  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE); /*On utilise le port E pour ENABLE*/
 8000b08:	2101      	movs	r1, #1
 8000b0a:	2010      	movs	r0, #16
 8000b0c:	f7ff fdee 	bl	80006ec <RCC_AHB1PeriphClockCmd>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 8000b10:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <init_LCD_Pins+0x68>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	601a      	str	r2, [r3, #0]

  /*Settings des pins*/
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <init_LCD_Pins+0x68>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	711a      	strb	r2, [r3, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000b1c:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <init_LCD_Pins+0x68>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	719a      	strb	r2, [r3, #6]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <init_LCD_Pins+0x68>)
 8000b24:	2203      	movs	r2, #3
 8000b26:	715a      	strb	r2, [r3, #5]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000b28:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <init_LCD_Pins+0x68>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	71da      	strb	r2, [r3, #7]
  GPIO_Init(GPIOE, &GPIO_InitStructure);
 8000b2e:	4903      	ldr	r1, [pc, #12]	; (8000b3c <init_LCD_Pins+0x68>)
 8000b30:	4804      	ldr	r0, [pc, #16]	; (8000b44 <init_LCD_Pins+0x70>)
 8000b32:	f7ff fc5b 	bl	80003ec <GPIO_Init>

}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200000d8 	.word	0x200000d8
 8000b40:	40020c00 	.word	0x40020c00
 8000b44:	40021000 	.word	0x40021000

08000b48 <Activation_LCD>:

/*fonction d'activation du LCD (LCD pret a ecrire apres appel)*/
void Activation_LCD(void){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	/*operation 8 bits et 2 lignes*/

	Write_LCD(0x0001); /*Display clear*/
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f000 f80b 	bl	8000b68 <Write_LCD>

	Write_LCD(0x0038); /*Set operation 8 bits sur 2 lignes*/
 8000b52:	2038      	movs	r0, #56	; 0x38
 8000b54:	f000 f808 	bl	8000b68 <Write_LCD>

    Write_LCD(0x000E); /*LCD screen on*/
 8000b58:	200e      	movs	r0, #14
 8000b5a:	f000 f805 	bl	8000b68 <Write_LCD>

    Write_LCD(0x0006); /*Set entry mode*/
 8000b5e:	2006      	movs	r0, #6
 8000b60:	f000 f802 	bl	8000b68 <Write_LCD>

}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <Write_LCD>:

/*fonction d'ecriture de data sur le LCD (prend la valeur du chiffre hexadecimal)*/
void Write_LCD(int nombre){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]

	*ODRE_ADDRESS = 0x0001;
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <Write_LCD+0x34>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	601a      	str	r2, [r3, #0]

	Delay(5);
 8000b76:	2005      	movs	r0, #5
 8000b78:	f000 f948 	bl	8000e0c <Delay>

	*ODRD_ADDRESS = nombre;
 8000b7c:	4a08      	ldr	r2, [pc, #32]	; (8000ba0 <Write_LCD+0x38>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6013      	str	r3, [r2, #0]

	Delay(5);
 8000b82:	2005      	movs	r0, #5
 8000b84:	f000 f942 	bl	8000e0c <Delay>

	*ODRE_ADDRESS= 0x0000;
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <Write_LCD+0x34>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]

	Delay(5);
 8000b8e:	2005      	movs	r0, #5
 8000b90:	f000 f93c 	bl	8000e0c <Delay>

}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40021014 	.word	0x40021014
 8000ba0:	40020c14 	.word	0x40020c14

08000ba4 <Ecriture_temps>:

	Write_LCD(0x00000242);  /*Ecrit B*/

}

void Ecriture_temps(unsigned int temps){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]

	Write_LCD(0x00000246); /*Ecrit F*/
 8000bac:	f240 2046 	movw	r0, #582	; 0x246
 8000bb0:	f7ff ffda 	bl	8000b68 <Write_LCD>

	Write_LCD(0x00000244);  /*Ecrit D*/
 8000bb4:	f44f 7011 	mov.w	r0, #580	; 0x244
 8000bb8:	f7ff ffd6 	bl	8000b68 <Write_LCD>

	Write_LCD(0x00000246);  /*Ecrit F*/
 8000bbc:	f240 2046 	movw	r0, #582	; 0x246
 8000bc0:	f7ff ffd2 	bl	8000b68 <Write_LCD>

	Write_LCD(0x00000242);  /*Ecrit B*/
 8000bc4:	f240 2042 	movw	r0, #578	; 0x242
 8000bc8:	f7ff ffce 	bl	8000b68 <Write_LCD>

	Write_LCD(temps);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff ffca 	bl	8000b68 <Write_LCD>
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8000be6:	bf00      	nop
}
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <EVAL_AUDIO_GetSampleCallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return;
 8000bf6:	bf00      	nop
 8000bf8:	bf00      	nop
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <INIT_UART>:

/* Includes ------------------------------------------------------------------*/
#include "UART.h"

/*Routine d'initialisation du module UART du microcontroleur*/
void INIT_UART(void){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0

    /*initalisation des proprietes du module*/
	UART_InitStructure.USART_BaudRate = 9600;
 8000c08:	4b28      	ldr	r3, [pc, #160]	; (8000cac <INIT_UART+0xa8>)
 8000c0a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c0e:	601a      	str	r2, [r3, #0]
	UART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8000c10:	4b26      	ldr	r3, [pc, #152]	; (8000cac <INIT_UART+0xa8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	809a      	strh	r2, [r3, #4]
	UART_InitStructure.USART_StopBits = USART_StopBits_2;
 8000c16:	4b25      	ldr	r3, [pc, #148]	; (8000cac <INIT_UART+0xa8>)
 8000c18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c1c:	80da      	strh	r2, [r3, #6]
	UART_InitStructure.USART_Parity = USART_Parity_Odd;
 8000c1e:	4b23      	ldr	r3, [pc, #140]	; (8000cac <INIT_UART+0xa8>)
 8000c20:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000c24:	811a      	strh	r2, [r3, #8]
	UART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000c26:	4b21      	ldr	r3, [pc, #132]	; (8000cac <INIT_UART+0xa8>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	819a      	strh	r2, [r3, #12]
	UART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000c2c:	4b1f      	ldr	r3, [pc, #124]	; (8000cac <INIT_UART+0xa8>)
 8000c2e:	220c      	movs	r2, #12
 8000c30:	815a      	strh	r2, [r3, #10]

	/*initalisation des GPIO*/
	//RCC_AHB1PeriphClockCmd(UART4_TX_PIN | UART4_RX_PIN, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000c32:	2101      	movs	r1, #1
 8000c34:	2004      	movs	r0, #4
 8000c36:	f7ff fd59 	bl	80006ec <RCC_AHB1PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000c40:	f7ff fd74 	bl	800072c <RCC_APB1PeriphClockCmd>

	/*pas sure c'est quoi*/
	GPIO_PinAFConfig(GPIOC,GPIO_PinSource10,GPIO_AF_UART4);
 8000c44:	2208      	movs	r2, #8
 8000c46:	210a      	movs	r1, #10
 8000c48:	4819      	ldr	r0, [pc, #100]	; (8000cb0 <INIT_UART+0xac>)
 8000c4a:	f7ff fc5d 	bl	8000508 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC,GPIO_PinSource11,GPIO_AF_UART4);
 8000c4e:	2208      	movs	r2, #8
 8000c50:	210b      	movs	r1, #11
 8000c52:	4817      	ldr	r0, [pc, #92]	; (8000cb0 <INIT_UART+0xac>)
 8000c54:	f7ff fc58 	bl	8000508 <GPIO_PinAFConfig>

	/*Configuration de TX*/
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000c58:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <INIT_UART+0xb0>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	719a      	strb	r2, [r3, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <INIT_UART+0xb0>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	71da      	strb	r2, [r3, #7]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000c64:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <INIT_UART+0xb0>)
 8000c66:	2202      	movs	r2, #2
 8000c68:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8000c6a:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <INIT_UART+0xb0>)
 8000c6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c70:	601a      	str	r2, [r3, #0]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <INIT_UART+0xb0>)
 8000c74:	2202      	movs	r2, #2
 8000c76:	715a      	strb	r2, [r3, #5]
	GPIO_Init(GPIOC,&GPIO_InitStructure);
 8000c78:	490e      	ldr	r1, [pc, #56]	; (8000cb4 <INIT_UART+0xb0>)
 8000c7a:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <INIT_UART+0xac>)
 8000c7c:	f7ff fbb6 	bl	80003ec <GPIO_Init>

	/*Configuration de RX*/
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <INIT_UART+0xb0>)
 8000c82:	2202      	movs	r2, #2
 8000c84:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <INIT_UART+0xb0>)
 8000c88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c8c:	601a      	str	r2, [r3, #0]
	GPIO_Init(GPIOC,&GPIO_InitStructure);
 8000c8e:	4909      	ldr	r1, [pc, #36]	; (8000cb4 <INIT_UART+0xb0>)
 8000c90:	4807      	ldr	r0, [pc, #28]	; (8000cb0 <INIT_UART+0xac>)
 8000c92:	f7ff fbab 	bl	80003ec <GPIO_Init>

	USART_Init(UART4, &UART_InitStructure);
 8000c96:	4905      	ldr	r1, [pc, #20]	; (8000cac <INIT_UART+0xa8>)
 8000c98:	4807      	ldr	r0, [pc, #28]	; (8000cb8 <INIT_UART+0xb4>)
 8000c9a:	f7ff fd93 	bl	80007c4 <USART_Init>
	USART_Cmd(UART4,ENABLE);
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <INIT_UART+0xb4>)
 8000ca2:	f7ff fe49 	bl	8000938 <USART_Cmd>
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200000c8 	.word	0x200000c8
 8000cb0:	40020800 	.word	0x40020800
 8000cb4:	200000d8 	.word	0x200000d8
 8000cb8:	40004c00 	.word	0x40004c00

08000cbc <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	6039      	str	r1, [r7, #0]
 8000cc6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	da0b      	bge.n	8000ce8 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000cd0:	490d      	ldr	r1, [pc, #52]	; (8000d08 <NVIC_SetPriority+0x4c>)
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	f003 030f 	and.w	r3, r3, #15
 8000cd8:	3b04      	subs	r3, #4
 8000cda:	683a      	ldr	r2, [r7, #0]
 8000cdc:	b2d2      	uxtb	r2, r2
 8000cde:	0112      	lsls	r2, r2, #4
 8000ce0:	b2d2      	uxtb	r2, r2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000ce6:	e009      	b.n	8000cfc <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000ce8:	4908      	ldr	r1, [pc, #32]	; (8000d0c <NVIC_SetPriority+0x50>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	683a      	ldr	r2, [r7, #0]
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	0112      	lsls	r2, r2, #4
 8000cf4:	b2d2      	uxtb	r2, r2
 8000cf6:	440b      	add	r3, r1
 8000cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00
 8000d0c:	e000e100 	.word	0xe000e100

08000d10 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d1e:	d301      	bcc.n	8000d24 <SysTick_Config+0x14>
 8000d20:	2301      	movs	r3, #1
 8000d22:	e011      	b.n	8000d48 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000d24:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <SysTick_Config+0x40>)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8000d30:	210f      	movs	r1, #15
 8000d32:	f04f 30ff 	mov.w	r0, #4294967295
 8000d36:	f7ff ffc1 	bl	8000cbc <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000d3a:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <SysTick_Config+0x40>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d40:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <SysTick_Config+0x40>)
 8000d42:	2207      	movs	r2, #7
 8000d44:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	e000e010 	.word	0xe000e010

08000d54 <main>:
/* Includes ------------------------------------------------------------------*/
#include "main.h"


int main(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  if (SysTick_Config(SystemCoreClock / 1000)) /*interrupt every 1ms*/
 8000d58:	4b14      	ldr	r3, [pc, #80]	; (8000dac <main+0x58>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a14      	ldr	r2, [pc, #80]	; (8000db0 <main+0x5c>)
 8000d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d62:	099b      	lsrs	r3, r3, #6
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ffd3 	bl	8000d10 <SysTick_Config>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d000      	beq.n	8000d72 <main+0x1e>
  { 
    /* Capture error */ 
    while (1);
 8000d70:	e7fe      	b.n	8000d70 <main+0x1c>
  }
  temps_ecoule = 0; /*initalise le temps*/
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <main+0x60>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
  TimingGlobal = 1000; /*initialise le timing global*/
 8000d78:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <main+0x64>)
 8000d7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d7e:	601a      	str	r2, [r3, #0]
  init_LED();       /*initalise la LED*/
 8000d80:	f000 f81c 	bl	8000dbc <init_LED>
  init_LCD_Pins(); /*initalise les pins qui seront utilisees par le LCD*/
 8000d84:	f7ff fea6 	bl	8000ad4 <init_LCD_Pins>
  INIT_UART();     /*initalise les pins du module UART (ainsi que le module lui-meme*/
 8000d88:	f7ff ff3c 	bl	8000c04 <INIT_UART>
  Activation_LCD();
 8000d8c:	f7ff fedc 	bl	8000b48 <Activation_LCD>

  while (1)
  {
     Ecriture_temps(temps_ecoule+48); /*Affiche les initales+temps sur la premiere ligne (mise a jour a chaque execution de code*/
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <main+0x60>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	3330      	adds	r3, #48	; 0x30
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff ff04 	bl	8000ba4 <Ecriture_temps>
	                   //ajouter commande reception et affichage uart
     Delay(1000);
 8000d9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000da0:	f000 f834 	bl	8000e0c <Delay>
     RESET_LCD();
 8000da4:	f000 f82a 	bl	8000dfc <RESET_LCD>
     Ecriture_temps(temps_ecoule+48); /*Affiche les initales+temps sur la premiere ligne (mise a jour a chaque execution de code*/
 8000da8:	e7f2      	b.n	8000d90 <main+0x3c>
 8000daa:	bf00      	nop
 8000dac:	20000020 	.word	0x20000020
 8000db0:	10624dd3 	.word	0x10624dd3
 8000db4:	20000048 	.word	0x20000048
 8000db8:	20000044 	.word	0x20000044

08000dbc <init_LED>:
  }
}

void init_LED(void){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	2008      	movs	r0, #8
 8000dc4:	f7ff fc92 	bl	80006ec <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 8000dc8:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <init_LED+0x38>)
 8000dca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dce:	601a      	str	r2, [r3, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <init_LED+0x38>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	711a      	strb	r2, [r3, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000dd6:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <init_LED+0x38>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	719a      	strb	r2, [r3, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <init_LED+0x38>)
 8000dde:	2203      	movs	r2, #3
 8000de0:	715a      	strb	r2, [r3, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000de2:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <init_LED+0x38>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	71da      	strb	r2, [r3, #7]
    GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000de8:	4902      	ldr	r1, [pc, #8]	; (8000df4 <init_LED+0x38>)
 8000dea:	4803      	ldr	r0, [pc, #12]	; (8000df8 <init_LED+0x3c>)
 8000dec:	f7ff fafe 	bl	80003ec <GPIO_Init>
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	200000d8 	.word	0x200000d8
 8000df8:	40020c00 	.word	0x40020c00

08000dfc <RESET_LCD>:

void LED_OFF(void){
	GPIO_ResetBits(GPIOD, GPIO_Pin_12);
}

void RESET_LCD(void){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	Write_LCD(0x0001);
 8000e00:	2001      	movs	r0, #1
 8000e02:	f7ff feb1 	bl	8000b68 <Write_LCD>
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <Delay>:
  * @brief  Inserts a delay time.
  * @param  nTime: specifies the delay time length, in milliseconds.
  * @retval None
  */
void Delay(__IO uint32_t nTime)
{ 
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  TimingDelay = nTime;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a06      	ldr	r2, [pc, #24]	; (8000e30 <Delay+0x24>)
 8000e18:	6013      	str	r3, [r2, #0]

  while(TimingDelay != 0);
 8000e1a:	bf00      	nop
 8000e1c:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <Delay+0x24>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d1fb      	bne.n	8000e1c <Delay+0x10>
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	20000040 	.word	0x20000040

08000e34 <TimingDelay_Decrement>:
  * @brief  Decrements the TimingDelay variable.
  * @param  None
  * @retval None
  */
void TimingDelay_Decrement(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  if (TimingDelay != 0x00)
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <TimingDelay_Decrement+0x20>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d004      	beq.n	8000e4a <TimingDelay_Decrement+0x16>
  { 
    TimingDelay--;
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <TimingDelay_Decrement+0x20>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	3b01      	subs	r3, #1
 8000e46:	4a03      	ldr	r2, [pc, #12]	; (8000e54 <TimingDelay_Decrement+0x20>)
 8000e48:	6013      	str	r3, [r2, #0]
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	20000040 	.word	0x20000040

08000e58 <TimingGlobal_Decrement>:

void TimingGlobal_Decrement(void){
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
	if(TimingGlobal == 0x00){
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <TimingGlobal_Decrement+0x34>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d109      	bne.n	8000e78 <TimingGlobal_Decrement+0x20>
		temps_ecoule++; /*si une seconde ecoule en interruption, alors une seconde ajoutee*/
 8000e64:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <TimingGlobal_Decrement+0x38>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	4a09      	ldr	r2, [pc, #36]	; (8000e90 <TimingGlobal_Decrement+0x38>)
 8000e6c:	6013      	str	r3, [r2, #0]
	    TimingGlobal = 1000;
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <TimingGlobal_Decrement+0x34>)
 8000e70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e74:	601a      	str	r2, [r3, #0]
	}                        /*on remet le TimingGlobal a 1000 pour compter une nouvelle seconde*/

     else{
		TimingGlobal--;       /*Si une seconde ne s'est pas ecoulee, alors un decremente*/
     }
}
 8000e76:	e004      	b.n	8000e82 <TimingGlobal_Decrement+0x2a>
		TimingGlobal--;       /*Si une seconde ne s'est pas ecoulee, alors un decremente*/
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <TimingGlobal_Decrement+0x34>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	4a03      	ldr	r2, [pc, #12]	; (8000e8c <TimingGlobal_Decrement+0x34>)
 8000e80:	6013      	str	r3, [r2, #0]
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	20000044 	.word	0x20000044
 8000e90:	20000048 	.word	0x20000048

08000e94 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e96:	e003      	b.n	8000ea0 <LoopCopyDataInit>

08000e98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e98:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000e9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e9e:	3104      	adds	r1, #4

08000ea0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ea0:	480a      	ldr	r0, [pc, #40]	; (8000ecc <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000ea4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ea6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ea8:	d3f6      	bcc.n	8000e98 <CopyDataInit>
  ldr  r2, =_sbss
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000eac:	e002      	b.n	8000eb4 <LoopFillZerobss>

08000eae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000eae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000eb0:	f842 3b04 	str.w	r3, [r2], #4

08000eb4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000eb6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000eb8:	d3f9      	bcc.n	8000eae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000eba:	f000 f841 	bl	8000f40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ebe:	f000 f8f1 	bl	80010a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ec2:	f7ff ff47 	bl	8000d54 <main>
  bx  lr    
 8000ec6:	4770      	bx	lr
  ldr  r3, =_sidata
 8000ec8:	0800110c 	.word	0x0800110c
  ldr  r0, =_sdata
 8000ecc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ed0:	20000024 	.word	0x20000024
  ldr  r2, =_sbss
 8000ed4:	20000024 	.word	0x20000024
  ldr  r3, = _ebss
 8000ed8:	20000108 	.word	0x20000108

08000edc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000edc:	e7fe      	b.n	8000edc <ADC_IRQHandler>

08000ede <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <HardFault_Handler+0x4>

08000ef2 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <MemManage_Handler+0x4>

08000ef8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <BusFault_Handler+0x4>

08000efe <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <UsageFault_Handler+0x4>

08000f04 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	af00      	add	r7, sp, #0
  TimingGlobal_Decrement();
 8000f32:	f7ff ff91 	bl	8000e58 <TimingGlobal_Decrement>
  TimingDelay_Decrement();
 8000f36:	f7ff ff7d 	bl	8000e34 <TimingDelay_Decrement>

}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f44:	4a16      	ldr	r2, [pc, #88]	; (8000fa0 <SystemInit+0x60>)
 8000f46:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <SystemInit+0x60>)
 8000f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000f54:	4a13      	ldr	r2, [pc, #76]	; (8000fa4 <SystemInit+0x64>)
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <SystemInit+0x64>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f60:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <SystemInit+0x64>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000f66:	4a0f      	ldr	r2, [pc, #60]	; (8000fa4 <SystemInit+0x64>)
 8000f68:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <SystemInit+0x64>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f74:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000f76:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <SystemInit+0x64>)
 8000f78:	4a0b      	ldr	r2, [pc, #44]	; (8000fa8 <SystemInit+0x68>)
 8000f7a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000f7c:	4a09      	ldr	r2, [pc, #36]	; (8000fa4 <SystemInit+0x64>)
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <SystemInit+0x64>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f86:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <SystemInit+0x64>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000f8e:	f000 f80d 	bl	8000fac <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f92:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <SystemInit+0x60>)
 8000f94:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f98:	609a      	str	r2, [r3, #8]
#endif
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	e000ed00 	.word	0xe000ed00
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	24003010 	.word	0x24003010

08000fac <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000fba:	4a36      	ldr	r2, [pc, #216]	; (8001094 <SetSysClock+0xe8>)
 8000fbc:	4b35      	ldr	r3, [pc, #212]	; (8001094 <SetSysClock+0xe8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000fc6:	4b33      	ldr	r3, [pc, #204]	; (8001094 <SetSysClock+0xe8>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fce:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d103      	bne.n	8000fe4 <SetSysClock+0x38>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000fe2:	d1f0      	bne.n	8000fc6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000fe4:	4b2b      	ldr	r3, [pc, #172]	; (8001094 <SetSysClock+0xe8>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d002      	beq.n	8000ff6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	e001      	b.n	8000ffa <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d142      	bne.n	8001086 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001000:	4a24      	ldr	r2, [pc, #144]	; (8001094 <SetSysClock+0xe8>)
 8001002:	4b24      	ldr	r3, [pc, #144]	; (8001094 <SetSysClock+0xe8>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800100a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 800100c:	4a22      	ldr	r2, [pc, #136]	; (8001098 <SetSysClock+0xec>)
 800100e:	4b22      	ldr	r3, [pc, #136]	; (8001098 <SetSysClock+0xec>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001016:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001018:	4a1e      	ldr	r2, [pc, #120]	; (8001094 <SetSysClock+0xe8>)
 800101a:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <SetSysClock+0xe8>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001020:	4a1c      	ldr	r2, [pc, #112]	; (8001094 <SetSysClock+0xe8>)
 8001022:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <SetSysClock+0xe8>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800102a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800102c:	4a19      	ldr	r2, [pc, #100]	; (8001094 <SetSysClock+0xe8>)
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <SetSysClock+0xe8>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001036:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001038:	4b16      	ldr	r3, [pc, #88]	; (8001094 <SetSysClock+0xe8>)
 800103a:	4a18      	ldr	r2, [pc, #96]	; (800109c <SetSysClock+0xf0>)
 800103c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800103e:	4a15      	ldr	r2, [pc, #84]	; (8001094 <SetSysClock+0xe8>)
 8001040:	4b14      	ldr	r3, [pc, #80]	; (8001094 <SetSysClock+0xe8>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001048:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800104a:	bf00      	nop
 800104c:	4b11      	ldr	r3, [pc, #68]	; (8001094 <SetSysClock+0xe8>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0f9      	beq.n	800104c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <SetSysClock+0xf4>)
 800105a:	f240 6205 	movw	r2, #1541	; 0x605
 800105e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001060:	4a0c      	ldr	r2, [pc, #48]	; (8001094 <SetSysClock+0xe8>)
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <SetSysClock+0xe8>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f023 0303 	bic.w	r3, r3, #3
 800106a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800106c:	4a09      	ldr	r2, [pc, #36]	; (8001094 <SetSysClock+0xe8>)
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <SetSysClock+0xe8>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f043 0302 	orr.w	r3, r3, #2
 8001076:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001078:	bf00      	nop
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <SetSysClock+0xe8>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f003 030c 	and.w	r3, r3, #12
 8001082:	2b08      	cmp	r3, #8
 8001084:	d1f9      	bne.n	800107a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800
 8001098:	40007000 	.word	0x40007000
 800109c:	07405408 	.word	0x07405408
 80010a0:	40023c00 	.word	0x40023c00

080010a4 <__libc_init_array>:
 80010a4:	b570      	push	{r4, r5, r6, lr}
 80010a6:	4e0d      	ldr	r6, [pc, #52]	; (80010dc <__libc_init_array+0x38>)
 80010a8:	4c0d      	ldr	r4, [pc, #52]	; (80010e0 <__libc_init_array+0x3c>)
 80010aa:	1ba4      	subs	r4, r4, r6
 80010ac:	10a4      	asrs	r4, r4, #2
 80010ae:	2500      	movs	r5, #0
 80010b0:	42a5      	cmp	r5, r4
 80010b2:	d109      	bne.n	80010c8 <__libc_init_array+0x24>
 80010b4:	4e0b      	ldr	r6, [pc, #44]	; (80010e4 <__libc_init_array+0x40>)
 80010b6:	4c0c      	ldr	r4, [pc, #48]	; (80010e8 <__libc_init_array+0x44>)
 80010b8:	f000 f818 	bl	80010ec <_init>
 80010bc:	1ba4      	subs	r4, r4, r6
 80010be:	10a4      	asrs	r4, r4, #2
 80010c0:	2500      	movs	r5, #0
 80010c2:	42a5      	cmp	r5, r4
 80010c4:	d105      	bne.n	80010d2 <__libc_init_array+0x2e>
 80010c6:	bd70      	pop	{r4, r5, r6, pc}
 80010c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80010cc:	4798      	blx	r3
 80010ce:	3501      	adds	r5, #1
 80010d0:	e7ee      	b.n	80010b0 <__libc_init_array+0xc>
 80010d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80010d6:	4798      	blx	r3
 80010d8:	3501      	adds	r5, #1
 80010da:	e7f2      	b.n	80010c2 <__libc_init_array+0x1e>
 80010dc:	08001104 	.word	0x08001104
 80010e0:	08001104 	.word	0x08001104
 80010e4:	08001104 	.word	0x08001104
 80010e8:	08001108 	.word	0x08001108

080010ec <_init>:
 80010ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ee:	bf00      	nop
 80010f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010f2:	bc08      	pop	{r3}
 80010f4:	469e      	mov	lr, r3
 80010f6:	4770      	bx	lr

080010f8 <_fini>:
 80010f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010fa:	bf00      	nop
 80010fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010fe:	bc08      	pop	{r3}
 8001100:	469e      	mov	lr, r3
 8001102:	4770      	bx	lr
